from tkinter import *from tkinter import ttk, messageboximport osfrom bbuddy import b_object, s_object, hw_object, refresh_pathf_path = os.path.dirname(__file__)b_files = os.listdir(f_path + '/BehaviourObject/')s_files = os.listdir(f_path + '/StimObject/')hw_files = os.listdir(f_path + '/HardwareObject/')b_obj_list = []for b_file in b_files :    if b_file.startswith("#") :        b_obj_list.append(b_file)        s_obj_list = []for s_file in s_files :    if s_file.startswith("#") :        s_obj_list.append(s_file)        hw_obj_list = []for hw_file in hw_files :    if hw_file.startswith("#") :        hw_obj_list.append(hw_file)        class GUI :    def __init__(self, size ="1200x800"):        root = Tk()         root.geometry(size)        root.protocol("WM_DELETE_WINDOW", self.on_closing)        root.title("Bbuddy")                self.root = root                b_frm = Frame(root)        b_frm.pack(fill='both', side='left', expand='True')                self.bfrm = b_frm                hw_frm = Frame(root)        hw_frm.pack(fill='both',side='right', expand='True')                self.hwfrm = hw_frm                s_frm = Frame(root)        s_frm.pack(fill='both',side='bottom', expand='True')                self.sfrm = s_frm                self.load_choice_box()            def load_choice_box(self) :        b_choicebox = Label(self.bfrm, text = "Behaviour object:")        b_choicebox.pack()                s_choicebox = Label(self.sfrm, text = "Stim object:")        s_choicebox.pack()                hw_choicebox = Label(self.hwfrm, text = "Hardware object:")        hw_choicebox.pack()                b_choicelist = ttk.Combobox(self.bfrm, values=b_obj_list)        b_choicelist.pack()        b_choicelist.current(0)        b_object = b_obj_list[0]                self.b_choice = b_choicelist        s_choicelist = ttk.Combobox(self.sfrm, values=s_obj_list)        s_choicelist.pack()        s_choicelist.current(0)        s_object = s_obj_list[0]                self.s_choice = s_choicelist        hw_choicelist = ttk.Combobox(self.hwfrm, values=hw_obj_list)        hw_choicelist.pack()        hw_choicelist.current(0)        hw_object = hw_obj_list[0]                self.hw_choice = hw_choicelist                self.refresh_object()                #self.b_choice.bind('<<ComboboxSelected>>',self.test)        self.b_choice.bind('<<ComboboxSelected>>',self.load_gui_behaviour)        self.s_choice.bind('<<ComboboxSelected>>',self.load_gui_stim)        self.hw_choice.bind('<<ComboboxSelected>>',self.load_gui_hardware)                b_entries = Frame(self.bfrm)        b_entries.pack(fill='both',side='top', expand='True')        self.b_entries = b_entries                s_entries = Frame(self.sfrm)        s_entries.pack(fill='both',side='top', expand='True')        self.s_entries = s_entries        hw_entries = Frame(self.hwfrm)        hw_entries.pack(fill='both',side='top', expand='True')        self.hw_entries = hw_entries        def refresh_object(self) :        b_object = self.b_choice.get()        s_object = self.s_choice.get()        hw_object = self.hw_choice.get()                refresh_path(b_object, s_object, hw_object)                    def load_gui_behaviour(self, event):        self.refresh_object()                from gui_behaviour import b_query                self.build_window(self.b_entries, b_query)                    def load_gui_stim(self, event):        self.refresh_object()                from gui_stim import s_query                self.build_window(self.s_entries, s_query)                    def load_gui_hardware(self, event):        self.refresh_object()                from gui_hardware import hw_query                self.build_window(self.hw_entries, hw_query)        def clear(self,frame) :        for child in frame.winfo_children() :            child.destroy()        def build_window(self, parent, query) :        self.clear(parent)        for field in query.gui_fields :            print(field)            label = Label(parent, text = field[0])            label.pack()            print(field[1])            if field[1] == 'Edit' :                print('OK')                widg = Entry(parent)                widg.pack()                if not query.completed :                    query.widget.append(widg)                        query.completed = True                            def loop(self) :        self.root.mainloop()        def on_closing(self):        if messagebox.askokcancel("Quit", "Do you want to quit?"):            self.root.destroy()                    #def test(self):        #self.bfrm"<<ComboboxSelected>>"        #print(self.bfrm.winfo_children())gui = GUI()gui.loop()"""class MyFirstGUI:    def __init__(self, master):        self.master = master        master.title("A simple GUI")        self.label = Label(master, text="This is our first GUI!")        self.label.pack()        self.greet_button = Button(master, text="Greet", command=self.greet)        self.greet_button.pack()        self.close_button = Button(master, text="Close", command=master.quit)        self.close_button.pack()    def greet(self):        print("Greetings!")my_gui = MyFirstGUI(root)root.mainloop()#help(my_gui.master)"""